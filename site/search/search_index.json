{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bienvenido a mi blog \u00b6 En este sitio web subir\u00e9 todo el contenido e informaci\u00f3n de diversos programas de software estad\u00edstico. SAS \u00b6 Para ir al blog de SAS haz click aqu\u00ed . En este blog conoceras todo lo relacionado a: SAS/BASE - Contiene todo lo esencial para leer, manipular datos as\u00ed como otras funciones b\u00e1sicas de SAS. SAS/STAT - Tiene muchos m\u00e9todos estad\u00edsticos y otros an\u00e1lisis de datos. SAS/IML - Es un lenguaje espec\u00edfico para lenguaje de matrices y funciones matem\u00e1ticas y estad\u00edsticas avanzadas. OTROS - Conexi\u00f3n de SAS con otros lenguajes de programaci\u00f3n y sus configuraciones. R \u00b6 Visita mi blog sobre R . En este blog encontrar\u00e1s todo lo relacionada al lenguaje R. Variables Funciones Matrices Gr\u00e1ficas Data sets Entre otras cosas m\u00e1s. Python \u00b6 Click aqu\u00ed para ir a mi blog de Python. Aqu\u00ed encontrar\u00e1s todo lo relacionado con librer\u00edas que se usan en ciencia de datos. Julia \u00a1NUEVO! \u00b6 Click aqu\u00ed para ir a mi blog de Julia. Jupyter Notebooks \u00b6 PROXIMAMENTE \u2026 Redes sociales \u00b6 S\u00edguenos en nuestras redes sociales Github","title":"Bienvenido a mi blog"},{"location":"#bienvenido-a-mi-blog","text":"En este sitio web subir\u00e9 todo el contenido e informaci\u00f3n de diversos programas de software estad\u00edstico.","title":"Bienvenido a mi blog"},{"location":"#sas","text":"Para ir al blog de SAS haz click aqu\u00ed . En este blog conoceras todo lo relacionado a: SAS/BASE - Contiene todo lo esencial para leer, manipular datos as\u00ed como otras funciones b\u00e1sicas de SAS. SAS/STAT - Tiene muchos m\u00e9todos estad\u00edsticos y otros an\u00e1lisis de datos. SAS/IML - Es un lenguaje espec\u00edfico para lenguaje de matrices y funciones matem\u00e1ticas y estad\u00edsticas avanzadas. OTROS - Conexi\u00f3n de SAS con otros lenguajes de programaci\u00f3n y sus configuraciones.","title":"SAS"},{"location":"#r","text":"Visita mi blog sobre R . En este blog encontrar\u00e1s todo lo relacionada al lenguaje R. Variables Funciones Matrices Gr\u00e1ficas Data sets Entre otras cosas m\u00e1s.","title":"R"},{"location":"#python","text":"Click aqu\u00ed para ir a mi blog de Python. Aqu\u00ed encontrar\u00e1s todo lo relacionado con librer\u00edas que se usan en ciencia de datos.","title":"Python"},{"location":"#julia-nuevo","text":"Click aqu\u00ed para ir a mi blog de Julia.","title":"Julia \u00a1NUEVO!"},{"location":"#jupyter-notebooks","text":"PROXIMAMENTE \u2026","title":"Jupyter Notebooks"},{"location":"#redes-sociales","text":"S\u00edguenos en nuestras redes sociales Github","title":"Redes sociales"},{"location":"about/","text":"Acerca de \u00b6 Nota \u00b6 Este blog contien c\u00f3digos personales y bajo ning\u00fan motivo el autor es responsable de los da\u00f1os ocasionados por resultados inesperados. Software de terceros \u00b6 Los softwares usados son SAS R Python Julia","title":"About"},{"location":"about/#acerca-de","text":"","title":"Acerca de"},{"location":"about/#nota","text":"Este blog contien c\u00f3digos personales y bajo ning\u00fan motivo el autor es responsable de los da\u00f1os ocasionados por resultados inesperados.","title":"Nota"},{"location":"about/#software-de-terceros","text":"Los softwares usados son SAS R Python Julia","title":"Software de terceros"},{"location":"julia/intro_julia/","text":"Inicio \u00b6 Al iniciar Julia se muestra una pantalla en que es la consola de Julia. Variables \u00b6 Julia tiene varios tipos de variables, por ejemplo tipo num\u00e9rico (entero y flotante) booleano o caracter. Para conocer todos los tipos de variables que existen, consulte la documentaci\u00f3n . Se puede definir una variable usando el operador de asignaci\u00f3n = como se muestra en el siguiente ejemplo. 1 2 3 4 5 x = 1 y = 1.25 z = x + y a = \"abc\" si = true Para saber de que tipo es, se puede usar la funci\u00f3n typeof() , el resultado se muestra 1 typeof ( x ) Int64 Operadores aritm\u00e9ticos \u00b6 Julia soporta diversos operadores aritm\u00e9ticos, la siguiente tabla muestra los principales operadores. Expresi\u00f3n Nombre Descripci\u00f3n x + y suma realiza adici\u00f3n x - y resta realiza substracci\u00f3n x * y producto realiza multiplicaci\u00f3n x / y divisi\u00f3n realiza divisi\u00f3n x \u00f7 y divisi\u00f3n entera similar a x/y , pero truncado a un entero x \\ y divisi\u00f3n inversa equivalente a y/x x ^ y potencia eleva x a la potencia y x % y resto equivalente to rem(x,y) Para una mayor referencia visita la secci\u00f3n operadores aritm\u00e9ticos . Ciclos \u00b6 Se puede realizar un ciclo usando el siguiente c\u00f3digo 1 2 3 for x in 1 : 10 println ( x ) end Nota La funci\u00f3n print() imprimir\u00eda los valores consecutivamente sin espacio, mientras que println() los imprime en una l\u00ednea nueva. Se debe tomar en cuenta que la palabra for debe cerrarse con un end para delimitar el bloque. Funciones \u00b6 Para definir una funci\u00f3n, se usa la palabra function seguido del nombre de la funci\u00f3n y entre par\u00e9ntesis los argumentos. Se debe especificar la paabra clave return , de otro modo retornar\u00eda el \u00faltimo valor calculado. La funci\u00f3n termina con un end e inmediatamente se compila. 1 2 3 4 5 6 7 function signo ( x ) if x < 0 resp = \"Negativo\" elseif x > 0 resp = \"Positivo\" else resp = \"Es Cero\" end return resp end una vez compilada, se puede usar. 1 signo ( - 5 ) El resultado ser\u00eda el siguiente \u201cNegativo\u201d","title":"Introducci\u00f3n a Julia"},{"location":"julia/intro_julia/#inicio","text":"Al iniciar Julia se muestra una pantalla en que es la consola de Julia.","title":"Inicio"},{"location":"julia/intro_julia/#variables","text":"Julia tiene varios tipos de variables, por ejemplo tipo num\u00e9rico (entero y flotante) booleano o caracter. Para conocer todos los tipos de variables que existen, consulte la documentaci\u00f3n . Se puede definir una variable usando el operador de asignaci\u00f3n = como se muestra en el siguiente ejemplo. 1 2 3 4 5 x = 1 y = 1.25 z = x + y a = \"abc\" si = true Para saber de que tipo es, se puede usar la funci\u00f3n typeof() , el resultado se muestra 1 typeof ( x ) Int64","title":"Variables"},{"location":"julia/intro_julia/#operadores-aritmeticos","text":"Julia soporta diversos operadores aritm\u00e9ticos, la siguiente tabla muestra los principales operadores. Expresi\u00f3n Nombre Descripci\u00f3n x + y suma realiza adici\u00f3n x - y resta realiza substracci\u00f3n x * y producto realiza multiplicaci\u00f3n x / y divisi\u00f3n realiza divisi\u00f3n x \u00f7 y divisi\u00f3n entera similar a x/y , pero truncado a un entero x \\ y divisi\u00f3n inversa equivalente a y/x x ^ y potencia eleva x a la potencia y x % y resto equivalente to rem(x,y) Para una mayor referencia visita la secci\u00f3n operadores aritm\u00e9ticos .","title":"Operadores aritm\u00e9ticos"},{"location":"julia/intro_julia/#ciclos","text":"Se puede realizar un ciclo usando el siguiente c\u00f3digo 1 2 3 for x in 1 : 10 println ( x ) end Nota La funci\u00f3n print() imprimir\u00eda los valores consecutivamente sin espacio, mientras que println() los imprime en una l\u00ednea nueva. Se debe tomar en cuenta que la palabra for debe cerrarse con un end para delimitar el bloque.","title":"Ciclos"},{"location":"julia/intro_julia/#funciones","text":"Para definir una funci\u00f3n, se usa la palabra function seguido del nombre de la funci\u00f3n y entre par\u00e9ntesis los argumentos. Se debe especificar la paabra clave return , de otro modo retornar\u00eda el \u00faltimo valor calculado. La funci\u00f3n termina con un end e inmediatamente se compila. 1 2 3 4 5 6 7 function signo ( x ) if x < 0 resp = \"Negativo\" elseif x > 0 resp = \"Positivo\" else resp = \"Es Cero\" end return resp end una vez compilada, se puede usar. 1 signo ( - 5 ) El resultado ser\u00eda el siguiente \u201cNegativo\u201d","title":"Funciones"},{"location":"python/basico/","text":"Librer\u00edas \u00b6 El primer paso es llamar las librer\u00edas que se utilizar\u00e1n en la sesi\u00f3n. Usaremos pandas y numpy y otra librer\u00eda adicional llamada os . 1 2 3 import pandas as pd import numpy as np import os Nota En ocasiones es preferible usar nombres m\u00e1s cortos para referirnos a los nombres de las librer\u00edas. Por ejemplo, a pandas le llamaremos pd y np para referirnos a numpy . Ahora llamaremos a la funci\u00f3n para leer los datos. 1 datos = pd . read_csv ( \"census.csv\" ) Como puede observarse, datos es un objeto DataFrame que se define gracias a la funci\u00f3n read_csv() de pandas. Se puede obtener informaci\u00f3n del objeto usando el siguiente comando. 1 datos . info () Para ver un resumen de los datos se puede usar 1 datos . describe () Para visualizar los primeros 5 datos se puede usar este c\u00f3digo 1 datos . head ( n = 5 )","title":"Python nivel b\u00e1sico"},{"location":"python/basico/#librerias","text":"El primer paso es llamar las librer\u00edas que se utilizar\u00e1n en la sesi\u00f3n. Usaremos pandas y numpy y otra librer\u00eda adicional llamada os . 1 2 3 import pandas as pd import numpy as np import os Nota En ocasiones es preferible usar nombres m\u00e1s cortos para referirnos a los nombres de las librer\u00edas. Por ejemplo, a pandas le llamaremos pd y np para referirnos a numpy . Ahora llamaremos a la funci\u00f3n para leer los datos. 1 datos = pd . read_csv ( \"census.csv\" ) Como puede observarse, datos es un objeto DataFrame que se define gracias a la funci\u00f3n read_csv() de pandas. Se puede obtener informaci\u00f3n del objeto usando el siguiente comando. 1 datos . info () Para ver un resumen de los datos se puede usar 1 datos . describe () Para visualizar los primeros 5 datos se puede usar este c\u00f3digo 1 datos . head ( n = 5 )","title":"Librer\u00edas"},{"location":"python/intro_python/","text":"Esta es un tutorial r\u00e1pido sobre el programa. Instalaci\u00f3n \u00b6 El sitio oficial de Python es python.org , sin embargo se recomienda instalar Anaconda , una distribuci\u00f3n de Pthon que contiene muchos m\u00f3dulos y software adicional para trabajar con Python. Anaconda \u00b6 Usted puede descargar el software gratuitamente. Visite la p\u00e1gina de Anaconda para m\u00e1s informaci\u00f3n. Interfaces gr\u00e1ficas \u00b6 Consola \u00b6 Python corre desde la consola de windows (cmd o powershell), aunque puede ser llamada desde Anaconda Prompt o Anaconda Powershell Prompt . Spyder \u00b6 Es otra interfaz gr\u00e1fica destinada a desarrollar c\u00f3digo eficientemente, ya que cuenta con varias opciones de configuraci\u00f3n y ventanas con varias funciones. Esta interfaz gr\u00e1fica ya viene incluida en Anaconda. Jupyter Notebooks \u00b6 Python tiene unos cuadernos interactivos para correr c\u00f3digo interactivamente. Jupyter Notebooks se instala junto con Anaconda.","title":"Introducci\u00f3n a Python"},{"location":"python/intro_python/#instalacion","text":"El sitio oficial de Python es python.org , sin embargo se recomienda instalar Anaconda , una distribuci\u00f3n de Pthon que contiene muchos m\u00f3dulos y software adicional para trabajar con Python.","title":"Instalaci\u00f3n"},{"location":"python/intro_python/#anaconda","text":"Usted puede descargar el software gratuitamente. Visite la p\u00e1gina de Anaconda para m\u00e1s informaci\u00f3n.","title":"Anaconda"},{"location":"python/intro_python/#interfaces-graficas","text":"","title":"Interfaces gr\u00e1ficas"},{"location":"python/intro_python/#consola","text":"Python corre desde la consola de windows (cmd o powershell), aunque puede ser llamada desde Anaconda Prompt o Anaconda Powershell Prompt .","title":"Consola"},{"location":"python/intro_python/#spyder","text":"Es otra interfaz gr\u00e1fica destinada a desarrollar c\u00f3digo eficientemente, ya que cuenta con varias opciones de configuraci\u00f3n y ventanas con varias funciones. Esta interfaz gr\u00e1fica ya viene incluida en Anaconda.","title":"Spyder"},{"location":"python/intro_python/#jupyter-notebooks","text":"Python tiene unos cuadernos interactivos para correr c\u00f3digo interactivamente. Jupyter Notebooks se instala junto con Anaconda.","title":"Jupyter Notebooks"},{"location":"r/basico_r/","text":"Conociendo R \u00b6","title":"R nivel b\u00e1sico"},{"location":"r/basico_r/#conociendo-r","text":"","title":"Conociendo R"},{"location":"r/intro_r/","text":"Esta es un tutorial r\u00e1pido sobre el programa. Instalaci\u00f3n \u00b6 R-project \u00b6 Usted puede descargar el software gratuitamente. Visite la p\u00e1gina de R para m\u00e1s informaci\u00f3n. R studio \u00b6 R tiene una interfaz gr\u00e1fica para crear c\u00f3digo de forma m\u00e1s amigable. Visite R Studio para m\u00e1s informaci\u00f3n. Conceptos b\u00e1sicos \u00b6 R es un lenguaje de programaci\u00f3n que usa objetos. Estos objetos tienen identidad, atributos y propiedades. Escalares \u00b6 Un escalar es un vector con un solo elemento. Se pueden crear escalares con el s\u00edmbolo de asignaci\u00f3n <- o = . 1 2 3 n <- 5 m = n + 1 a = \"Hola mundo!\" Vectores \u00b6 Un vector es un objeto con uno o m\u00e1s elementos. Puede contener elementos num\u00e9ricos o caracteres. Se pueden crear vectores con la funci\u00f3n c() , por ejemplo: 1 2 3 x = c ( 2 , 1 , 5 ) y = m * x + n z = c ( \"ABC\" , \"AEI\" , \"XYZ\" ) Los vectores permiten algunas operaciones Matrices \u00b6 Factores \u00b6 Data Frames \u00b6 Listas \u00b6","title":"Introducci\u00f3n a R"},{"location":"r/intro_r/#instalacion","text":"","title":"Instalaci\u00f3n"},{"location":"r/intro_r/#r-project","text":"Usted puede descargar el software gratuitamente. Visite la p\u00e1gina de R para m\u00e1s informaci\u00f3n.","title":"R-project"},{"location":"r/intro_r/#r-studio","text":"R tiene una interfaz gr\u00e1fica para crear c\u00f3digo de forma m\u00e1s amigable. Visite R Studio para m\u00e1s informaci\u00f3n.","title":"R studio"},{"location":"r/intro_r/#conceptos-basicos","text":"R es un lenguaje de programaci\u00f3n que usa objetos. Estos objetos tienen identidad, atributos y propiedades.","title":"Conceptos b\u00e1sicos"},{"location":"r/intro_r/#escalares","text":"Un escalar es un vector con un solo elemento. Se pueden crear escalares con el s\u00edmbolo de asignaci\u00f3n <- o = . 1 2 3 n <- 5 m = n + 1 a = \"Hola mundo!\"","title":"Escalares"},{"location":"r/intro_r/#vectores","text":"Un vector es un objeto con uno o m\u00e1s elementos. Puede contener elementos num\u00e9ricos o caracteres. Se pueden crear vectores con la funci\u00f3n c() , por ejemplo: 1 2 3 x = c ( 2 , 1 , 5 ) y = m * x + n z = c ( \"ABC\" , \"AEI\" , \"XYZ\" ) Los vectores permiten algunas operaciones","title":"Vectores"},{"location":"r/intro_r/#matrices","text":"","title":"Matrices"},{"location":"r/intro_r/#factores","text":"","title":"Factores"},{"location":"r/intro_r/#data-frames","text":"","title":"Data Frames"},{"location":"r/intro_r/#listas","text":"","title":"Listas"},{"location":"sas/basico_sas/","text":"Lectura de datos \u00b6 Los dataset son el insumo principal para analisis de datos en SAS, por ello iniciaremos con una r\u00e1pida exploraci\u00f3n. La creaci\u00f3n de un dataset inicia con un bloque DATA y termina con un RUN . Introducci\u00f3n de valores de forma manual \u00b6 La forma m\u00e1s f\u00e1cil de crear un dataset, es con el uso de la sentencia INPUT y DATALINES con el fin de introducir valores manualmente. La sentencia INPUT sirve para indicar el nombre de las variables del dataset. Se puede poner el s\u00edmbolo $ para indicar que la variable es de tipo caracter. La sentencia DATALINES indica el inicio de los datos y finaliza con un punto y coma. Lectura de datos desde un archivo externo \u00b6 Leyendo archivos desde web \u00b6 Usando un procedimiento para leer datos externos \u00b6 Creaci\u00f3n de reportes \u00b6 SAS es una herramienta muy \u00fatil para crear reportes de datos, algunos de ellos se pueden personalizar o adaptarlos a distintas necesidades. Reportes b\u00e1sicos \u00b6 El reporte m\u00e1s simple que se puede crear, es mostrar el conjunto de datos usando el procedimiento PROC PRINT . Sin embargo, para datasets muy grandes, esto no ser\u00eda una buena opci\u00f3n debido a que SAS gastar\u00eda muchos recursos en imprimir toda la tabla. Se pueden usar ciertas configuraciones para que SAS solo procece cierta cantidad de observaciones de un dataset. La primera de ellas es mediante las opciones generales , la cual afectar\u00eda a todos los procedimientos durante la sesi\u00f3n o mediante las opciones de dataset la cual solo aplica durante ese procedimiento. Para una referencia completa sobre las opciones generales, visite el diccionario de opciones del sistema y para las opciones de dataset vea el diccionario de opciones de datasets . El siguiente ejemplo muestra las primeras diez observaciones del conjunto de datos de baseball, pero solo pedimos que muestre ciertas variables. 1 2 3 PROC PRINT DATA = SASHELP . BASEBALL(OBS= 10 ); VAR NAME TEAM NHOME SALARY ; RUN; Produce el siguiente resultado Un reporte con seleccionando casos con total \u00b6 PROC PRINT tambien tiene diversas sentencias para hacer reportes m\u00e1s completos o espec\u00edficos. 1 2 3 4 5 6 7 8 9 10 11 12 13 TITLE \"Reporte del equipo San Francisco\" ; PROC PRINT DATA = SASHELP . BASEBALL NOOBS; VAR NAME NHOME SALARY; WHERE TEAM EQ \"San Francisco\" ; FORMAT SALARY DOLLAR12.; LABEL NAME = \"Nombre del jugador\" NHOME = \"N\u00famero de Home Runs en 1986\" SALARY = \"Salario en 1987 (Miles de d\u00f3lares)\" ; SUM NHOME SALARY ; RUN; TITLE ; El anterior ejemplo muestra un reporte que incluye el nombre de todos los jugadores del equipo San Francisco , n\u00famero de home run ysu salario; al final del reporte se presenta el gran total de estas variables. En este ejemplo se modificaron las etiquetas y los formatos, pero s\u00f3lo para el reporte mediante las sentencias LABEL y FORMAT y se seleccionaron las observaciones que cumplieran cierto criterio. La opci\u00f3n NOOBS en la sentencia DATA pide no imprimir el n\u00famero de observaci\u00f3n del dataset y con la opci\u00f3n LABEL se mostrar\u00e1n las etiquetas de las variables. La sentencia VAR especifica las variables a mostrar. La sentencia WHERE selecciona las observaciones que cumplan la condici\u00f3n de que el equipo sea igual a San Francisco . La sentencia FORMAT le asigna a la variable SALARY el formato DOLLAR12. . LABEL especifica las etiquetas de las variables en el reporte. En caso de que las variables del dataset ya tengan etiquetas, estas etiquetas definidas prevalecen en el reporte. La sentencia SUM es la que especifica las variables que mostrar\u00e1n el gran total. Finalmente se agrega la opci\u00f3n TITLE para que se le ponga un t\u00edtulo al reporte y se vuelve a llamar al final para que vuelva a su valor inicial. Reporte con subtotales \u00b6 Es posible mostrar los reportes con subtotales por grupos de variables. Warning Los datos se deber\u00edan ordenar por la variables que se desee hacer el agrupamiento para evitar posibles errores en los c\u00e1lculos. SAS considera valores de la variable de agrupamiento como un bloque. Si SAS encontrara una observaci\u00f3n con un valor que ya proces\u00f3, se generar\u00e1 un error. Se puede usar el procedimiento SORT para ordenar una dataset por las variables que se deseen y posteriormente realizar el reporte. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 PROC SORT DATA = SASHELP . BASEBALL OUT = BASEBALL; BY DIVISION TEAM ; RUN; PROC PRINT DATA = BASEBALL NOOBS LABEL ; VAR NAME POSITION NHOME SALARY; FORMAT SALARY DOLLAR12.; LABEL DIVISION = \"Divisi\u00f3n\" NAME = \"Nombre del jugador\" TEAM = \"Equipo\" POSITION = \"Posici\u00f3n\" NHOME = \"N\u00famero de Home Runs en 1986\" SALARY = \"Salario en 1987 (Miles de d\u00f3lares)\" ; SUM NHOME SALARY; BY DIVISION TEAM ; RUN; El procedimiento SORT especifica que se ordene por las variables division y luego por team y se pide que se guarde una copia temporal, con el fin de no modificar el dataset original. En el procedimiento PRINT se usa la sentencia BY para que crear el reporte por combinaciones de valores de division y team . La imagen anterior muestra el ultimo grupo de variables (Divisi\u00f3n = West y Equipo = Texas). N\u00f3tese que este grupo contiene los subtotales tanto de las variables team y division as\u00ed como el gran total. Cada grupo contiene como t\u00edtulo el valor de las variables division y team . Tip Se pueden agregar en la sentencia PROC PRINT las opciones SUMLABEL y GRANDTOTAL_LABEL = para personalizar las etiquetas de subtotales y el gran total. Si se desea mostrar un reporte con otro estilo resaltando las variables de agrupamiento, se puede agregar la sentencia. ID DIVISION TEAM; El resultado es el siguente.","title":"SAS nivel b\u00e1sico"},{"location":"sas/basico_sas/#lectura-de-datos","text":"Los dataset son el insumo principal para analisis de datos en SAS, por ello iniciaremos con una r\u00e1pida exploraci\u00f3n. La creaci\u00f3n de un dataset inicia con un bloque DATA y termina con un RUN .","title":"Lectura de datos"},{"location":"sas/basico_sas/#introduccion-de-valores-de-forma-manual","text":"La forma m\u00e1s f\u00e1cil de crear un dataset, es con el uso de la sentencia INPUT y DATALINES con el fin de introducir valores manualmente. La sentencia INPUT sirve para indicar el nombre de las variables del dataset. Se puede poner el s\u00edmbolo $ para indicar que la variable es de tipo caracter. La sentencia DATALINES indica el inicio de los datos y finaliza con un punto y coma.","title":"Introducci\u00f3n de valores de forma manual"},{"location":"sas/basico_sas/#lectura-de-datos-desde-un-archivo-externo","text":"","title":"Lectura de datos desde un archivo externo"},{"location":"sas/basico_sas/#leyendo-archivos-desde-web","text":"","title":"Leyendo archivos desde web"},{"location":"sas/basico_sas/#usando-un-procedimiento-para-leer-datos-externos","text":"","title":"Usando un procedimiento para leer datos externos"},{"location":"sas/basico_sas/#creacion-de-reportes","text":"SAS es una herramienta muy \u00fatil para crear reportes de datos, algunos de ellos se pueden personalizar o adaptarlos a distintas necesidades.","title":"Creaci\u00f3n de reportes"},{"location":"sas/basico_sas/#reportes-basicos","text":"El reporte m\u00e1s simple que se puede crear, es mostrar el conjunto de datos usando el procedimiento PROC PRINT . Sin embargo, para datasets muy grandes, esto no ser\u00eda una buena opci\u00f3n debido a que SAS gastar\u00eda muchos recursos en imprimir toda la tabla. Se pueden usar ciertas configuraciones para que SAS solo procece cierta cantidad de observaciones de un dataset. La primera de ellas es mediante las opciones generales , la cual afectar\u00eda a todos los procedimientos durante la sesi\u00f3n o mediante las opciones de dataset la cual solo aplica durante ese procedimiento. Para una referencia completa sobre las opciones generales, visite el diccionario de opciones del sistema y para las opciones de dataset vea el diccionario de opciones de datasets . El siguiente ejemplo muestra las primeras diez observaciones del conjunto de datos de baseball, pero solo pedimos que muestre ciertas variables. 1 2 3 PROC PRINT DATA = SASHELP . BASEBALL(OBS= 10 ); VAR NAME TEAM NHOME SALARY ; RUN; Produce el siguiente resultado","title":"Reportes b\u00e1sicos"},{"location":"sas/basico_sas/#un-reporte-con-seleccionando-casos-con-total","text":"PROC PRINT tambien tiene diversas sentencias para hacer reportes m\u00e1s completos o espec\u00edficos. 1 2 3 4 5 6 7 8 9 10 11 12 13 TITLE \"Reporte del equipo San Francisco\" ; PROC PRINT DATA = SASHELP . BASEBALL NOOBS; VAR NAME NHOME SALARY; WHERE TEAM EQ \"San Francisco\" ; FORMAT SALARY DOLLAR12.; LABEL NAME = \"Nombre del jugador\" NHOME = \"N\u00famero de Home Runs en 1986\" SALARY = \"Salario en 1987 (Miles de d\u00f3lares)\" ; SUM NHOME SALARY ; RUN; TITLE ; El anterior ejemplo muestra un reporte que incluye el nombre de todos los jugadores del equipo San Francisco , n\u00famero de home run ysu salario; al final del reporte se presenta el gran total de estas variables. En este ejemplo se modificaron las etiquetas y los formatos, pero s\u00f3lo para el reporte mediante las sentencias LABEL y FORMAT y se seleccionaron las observaciones que cumplieran cierto criterio. La opci\u00f3n NOOBS en la sentencia DATA pide no imprimir el n\u00famero de observaci\u00f3n del dataset y con la opci\u00f3n LABEL se mostrar\u00e1n las etiquetas de las variables. La sentencia VAR especifica las variables a mostrar. La sentencia WHERE selecciona las observaciones que cumplan la condici\u00f3n de que el equipo sea igual a San Francisco . La sentencia FORMAT le asigna a la variable SALARY el formato DOLLAR12. . LABEL especifica las etiquetas de las variables en el reporte. En caso de que las variables del dataset ya tengan etiquetas, estas etiquetas definidas prevalecen en el reporte. La sentencia SUM es la que especifica las variables que mostrar\u00e1n el gran total. Finalmente se agrega la opci\u00f3n TITLE para que se le ponga un t\u00edtulo al reporte y se vuelve a llamar al final para que vuelva a su valor inicial.","title":"Un reporte con seleccionando casos con total"},{"location":"sas/basico_sas/#reporte-con-subtotales","text":"Es posible mostrar los reportes con subtotales por grupos de variables. Warning Los datos se deber\u00edan ordenar por la variables que se desee hacer el agrupamiento para evitar posibles errores en los c\u00e1lculos. SAS considera valores de la variable de agrupamiento como un bloque. Si SAS encontrara una observaci\u00f3n con un valor que ya proces\u00f3, se generar\u00e1 un error. Se puede usar el procedimiento SORT para ordenar una dataset por las variables que se deseen y posteriormente realizar el reporte. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 PROC SORT DATA = SASHELP . BASEBALL OUT = BASEBALL; BY DIVISION TEAM ; RUN; PROC PRINT DATA = BASEBALL NOOBS LABEL ; VAR NAME POSITION NHOME SALARY; FORMAT SALARY DOLLAR12.; LABEL DIVISION = \"Divisi\u00f3n\" NAME = \"Nombre del jugador\" TEAM = \"Equipo\" POSITION = \"Posici\u00f3n\" NHOME = \"N\u00famero de Home Runs en 1986\" SALARY = \"Salario en 1987 (Miles de d\u00f3lares)\" ; SUM NHOME SALARY; BY DIVISION TEAM ; RUN; El procedimiento SORT especifica que se ordene por las variables division y luego por team y se pide que se guarde una copia temporal, con el fin de no modificar el dataset original. En el procedimiento PRINT se usa la sentencia BY para que crear el reporte por combinaciones de valores de division y team . La imagen anterior muestra el ultimo grupo de variables (Divisi\u00f3n = West y Equipo = Texas). N\u00f3tese que este grupo contiene los subtotales tanto de las variables team y division as\u00ed como el gran total. Cada grupo contiene como t\u00edtulo el valor de las variables division y team . Tip Se pueden agregar en la sentencia PROC PRINT las opciones SUMLABEL y GRANDTOTAL_LABEL = para personalizar las etiquetas de subtotales y el gran total. Si se desea mostrar un reporte con otro estilo resaltando las variables de agrupamiento, se puede agregar la sentencia. ID DIVISION TEAM; El resultado es el siguente.","title":"Reporte con subtotales"},{"location":"sas/intro_sas/","text":"Este es un tutorial breve sobre el programa, se muestran los principales conceptos de SAS para iniciarse en SAS. Instalaci\u00f3n \u00b6 Consulte el sitio web de sas para m\u00e1s detalles. SAS University Edition SAS no es software libre ni es gratuito, sin embargo usted puede descargar el software gratuitamente. Visite SAS University edition para m\u00e1s informaci\u00f3n. Interfaces gr\u00e1ficas \u00b6 SAS BASE es la interfaz gr\u00e1fica cl\u00e1sica de SAS. Contiene una verntana lateral con una lista de librer\u00edas, mientras que hay una ventana principal de mensajes (log) y otra para escribir c\u00f3digo. Esta interfaz fue de las primeras en desarrollarse y por ello ya no ha sido mejorada por lo que podr\u00eda carecer de nuevas caracter\u00edsticas. Su principal ventaja es que gasta pocos recurso y es bastante r\u00e1pida. SAS Enterprise Guide es la interfaz gr\u00e1fica mas reciente y es constantemente mejorada. Conceptos b\u00e1sicos \u00b6 Procedimientos y pasos DATA \u00b6 SAS se compone de dos grandes bloques: el paso DATA y el paso PROC. El bloque DATA sirve para leer o generar datos, mientras que el bloque PROC generalmente sirve para analizar dichos datos, aunque hay muchos procedimientos. Este sencillo ejemplo muestra el flujo general de los programas de sas. Primero se crear\u00e1 un dataset con el bloque de instrucciones DATA. 1 2 3 4 5 6 7 8 9 10 11 DATA calificaciones; INPUT nombre $ Grupo $ puntaje; DATALINES; ANGELICA A 10 BRENDA A 9 MARCO B 8 LILIANA B 8 FABIAN C 9 MAURICIO C 7 ; RUN; SAS no muestra directamente los resultados, en su lugar, se escribe un mensaje en la ventana de log. Para visualizar el dataset creado, se debe ejecutar el siguiente c\u00f3digo, que constituye el paso PROC: 1 2 PROC PRINT DATA = calificaciones ; RUN; El resultado se muestra a continuaci\u00f3n Aunque se ha producido un resultado, nuevamente aparece un mensaje en la ventana del log: En el log aparecen las instrucciones que se ejecutaron, seguido de un mensaje indicando que los resultados se estan escribiendo en un archivo html. Finalmente en el log se nos indica el n\u00famero de observaciones le\u00eddas y el tiempo de ejecuci\u00f3n del procedimiento. Como puede verse, el log siempre est\u00e1 activo y registra todas las acciones ejecutadas. Posteriormente se ver\u00e1n como nos puede ayudar a encontrar errores y nos apoyar\u00e1 en la resoluci\u00f3n de estos. Datasets \u00b6 SAS almacena los datos en tablas llamadas datasets, los cuales son archivos que se almacenan en bibliotecas (library). SAS maneja dos tipos de datos: num\u00e9ricos y caracter. Los dataset permiten almacenar un tipo de dato en cada variable. Para crear un dataset, se utiliza el bloque de instrucciones conocido como paso DATA. El paso DATA inicia con la sentencia DATA seguido del nombre del dataset y termina con la palabra clave RUN. Por ejemplo el siguiente c\u00f3digo crea un dataset con 1 observaci\u00f3n y tres variables (2 num\u00e9ricas y otra caracter). 1 2 3 4 5 6 7 8 DATA EJEMPLO; FORMAT FECHA DATE.; FECHA = TODAY( ); INPUT X GRUPO $; DATALINES; 12.5 azul ; RUN; La primer sentencia define el nombre del dataset. La segunda le asigna un formato de fecha a la variable fecha. Esto a se debe a que internamente SAS almacena el resultado como un valor num\u00e9rico, pero quisieramos visualizarlo como una fecha. En la tercer sentencia se define una variable num\u00e9rica mediante una funci\u00f3n, la cual obtiene la fecha de hoy (n\u00famero de d\u00edas transcurridos desde el 1 de enero de 1960). En la siguiente sentencia se declaran 2 variables que sas va a recibir, la segunda se define como caracter al agregarle el signo $ . La sentencia DATALINES le dice al programa que se introducir\u00e1n valores de manera manual (cada rengl\u00f3n representa la primera observaci\u00f3n y cada variable est\u00e1 separada por un espacio). El punto y coma dicta el fin de la introducci\u00f3n de datos. Finalmente la palabra RUN define el fin del paso DATA. Un dataset consiste de dos partes: Una porci\u00f3n descriptora Una porci\u00f3n de datos La porci\u00f3n de datos es una colecci\u00f3n de datos arreglados en una tabla rectangular. Cada rengl\u00f3n o observaci\u00f3n representa mediciones de un individuo. La porci\u00f3n descriptora de un dataset contiene informaci\u00f3n del descriptor, por ejemplo, el nombre, fecha y hora de creaci\u00f3n, n\u00famero de observaciones y n\u00famero de variables. La porci\u00f3n descriptora tambien contiene informaci\u00f3n de los atributos de cada variable en el dataset. Los atributos contienen informaci\u00f3n como el nombre de la variable, el tipo, longitud, formato, informato y etiqueta. El siguiente cuadro resume los atributos de las variables. Nombre Valor Ejemplo Requerido Nota Variable Nombre SAS _nombre_alumno2 S\u00ed Hasta 32 car\u00e1cteres, iniciando con _ o una letras, puede contener valores num\u00e9ricos. Tipo char o num num S\u00ed Los valores perdidos (missing) para variables num\u00e9ricas se representan con . o con \"\" para caracter. Longitud Hasta 32,767 bytes para caracter, 8 para variables num\u00e9ricas 8 S\u00ed Las variables num\u00e9ricas se almacenan como valores de punto flotante en 8 bytes de longitud. Formato Nombre de formato date10. No Consulte Formatos de SAS para una referencia completa Informato Nombre de Informato dollar10. No Consulte Informatos de SAS para una referencia completa Etiqueta Una cadena de hasta 256 caracteres \u201cSegundo nombre del alumno\u201d No Algunos procedimientos o reportes usan la etiqueta en lugar del nombre de la variable. Es posible conocer las propiedades de un dataset usando el PROCEDIMIENTO CONTENTS para conocer la porci\u00f3n descriptora de un dataset. El siguiente c\u00f3digo nos muestra c\u00f3mo saber las propiedades de un dataset almacenado en sas. 1 2 PROC CONTENTS DATA = SASHELP . HEART VARNUM ; RUN; El resultado se muestra a continuaci\u00f3n Librer\u00edas \u00b6 Las librer\u00edas o bibliotecas son rutas donde se almacenan los datasets. Librer\u00eda Una librer\u00eda de SAS es una colecci\u00f3n de archivos de SAS. Es el nivel m\u00e1s alto de organizaci\u00f3n para la informaci\u00f3n dentro de SAS. En el sistema operativo Windows o UNIX, una librer\u00eda es t\u00edpicamente un grupo de archivos de SAS en el mismo folder o directorio. Si no se define una librer\u00eda, sas define una librer\u00eda temporal llamada WORK, la cual eliminar\u00e1 todos los datasets al finalizar la sesi\u00f3n. Para definir una librer\u00eda, se puede asignar una librer\u00eda a un ruta de la forma LIBNAME libref 'sas-library'; , donde libref es el nombre de la librer\u00eda (un nombre de sas de 1 a 8 caracteres que inicia con una letra o gui\u00f3n bajo y contiene solo letras, n\u00fameros o gui\u00f3n bajo) y sas-library es la ruta donde se almacenar\u00e1n los dataset, por ejemplo: 1 LIBNAME TAREAS \"C:\\Users\\Default\\Documents\" ; asignar\u00eda dicho directorio a la librer\u00eda TAREAS . Para referirse a un dataset almacenado en dicha librer\u00eda, se utiliza el siguiente nombre LIBRARY.DATASET , por ejemplo TAREAS.TABLA . Macros y variables macro \u00b6 Adem\u00e1s de los pasos PROC y DATA, SAS tiene un lenguaje especial llamado lenguaje macro, el cual especie de procesador de instrucciones que compila y ejecuta. Este lenguaje es muy \u00fatil para ejecutar tareas comunes o repetitivas A diferencia de otros lenguajes de programaci\u00f3n, SAS no permite definir variables de forma directa. Sin embargo, es posible definir variables macro , las cuales almacenan un valor ya sea un n\u00famero o un texto. Dichas variables son evaluadas y pueden ser llamadas en cualquier procedimiento macro. Hay tres formas de crear variables macro: Con la sentencia %let . Con la llamada symput() . con la sentencia INTO dentro de un procedimiento SQL. Se usa la sentencia %let macro-variable = <value>; y para mandar llamar el valor de dicha variable maro se usa &macro-variable . Por ejemplo si se desea definir ciertas variables a analizar, se puede crear la siguiente sentencia; 1 2 3 4 5 %let x = age weight height ; PROC MEANS DATA = SASHELP . CLASS; VAR &X ; RUN; Para ver el valor de la variable macro, se puede usar la sentencia macro %PUT <&macro-variable> , por ejemplo: 1 %PUT &x ; y el resultado ser\u00e1 age weight height Para m\u00e1s informaci\u00f3n acerca de sentencias y variables macro visite la documentaci\u00f3n de SAS .","title":"Introducci\u00f3n a SAS"},{"location":"sas/intro_sas/#instalacion","text":"Consulte el sitio web de sas para m\u00e1s detalles. SAS University Edition SAS no es software libre ni es gratuito, sin embargo usted puede descargar el software gratuitamente. Visite SAS University edition para m\u00e1s informaci\u00f3n.","title":"Instalaci\u00f3n"},{"location":"sas/intro_sas/#interfaces-graficas","text":"SAS BASE es la interfaz gr\u00e1fica cl\u00e1sica de SAS. Contiene una verntana lateral con una lista de librer\u00edas, mientras que hay una ventana principal de mensajes (log) y otra para escribir c\u00f3digo. Esta interfaz fue de las primeras en desarrollarse y por ello ya no ha sido mejorada por lo que podr\u00eda carecer de nuevas caracter\u00edsticas. Su principal ventaja es que gasta pocos recurso y es bastante r\u00e1pida. SAS Enterprise Guide es la interfaz gr\u00e1fica mas reciente y es constantemente mejorada.","title":"Interfaces gr\u00e1ficas"},{"location":"sas/intro_sas/#conceptos-basicos","text":"","title":"Conceptos b\u00e1sicos"},{"location":"sas/intro_sas/#procedimientos-y-pasos-data","text":"SAS se compone de dos grandes bloques: el paso DATA y el paso PROC. El bloque DATA sirve para leer o generar datos, mientras que el bloque PROC generalmente sirve para analizar dichos datos, aunque hay muchos procedimientos. Este sencillo ejemplo muestra el flujo general de los programas de sas. Primero se crear\u00e1 un dataset con el bloque de instrucciones DATA. 1 2 3 4 5 6 7 8 9 10 11 DATA calificaciones; INPUT nombre $ Grupo $ puntaje; DATALINES; ANGELICA A 10 BRENDA A 9 MARCO B 8 LILIANA B 8 FABIAN C 9 MAURICIO C 7 ; RUN; SAS no muestra directamente los resultados, en su lugar, se escribe un mensaje en la ventana de log. Para visualizar el dataset creado, se debe ejecutar el siguiente c\u00f3digo, que constituye el paso PROC: 1 2 PROC PRINT DATA = calificaciones ; RUN; El resultado se muestra a continuaci\u00f3n Aunque se ha producido un resultado, nuevamente aparece un mensaje en la ventana del log: En el log aparecen las instrucciones que se ejecutaron, seguido de un mensaje indicando que los resultados se estan escribiendo en un archivo html. Finalmente en el log se nos indica el n\u00famero de observaciones le\u00eddas y el tiempo de ejecuci\u00f3n del procedimiento. Como puede verse, el log siempre est\u00e1 activo y registra todas las acciones ejecutadas. Posteriormente se ver\u00e1n como nos puede ayudar a encontrar errores y nos apoyar\u00e1 en la resoluci\u00f3n de estos.","title":"Procedimientos y pasos DATA"},{"location":"sas/intro_sas/#datasets","text":"SAS almacena los datos en tablas llamadas datasets, los cuales son archivos que se almacenan en bibliotecas (library). SAS maneja dos tipos de datos: num\u00e9ricos y caracter. Los dataset permiten almacenar un tipo de dato en cada variable. Para crear un dataset, se utiliza el bloque de instrucciones conocido como paso DATA. El paso DATA inicia con la sentencia DATA seguido del nombre del dataset y termina con la palabra clave RUN. Por ejemplo el siguiente c\u00f3digo crea un dataset con 1 observaci\u00f3n y tres variables (2 num\u00e9ricas y otra caracter). 1 2 3 4 5 6 7 8 DATA EJEMPLO; FORMAT FECHA DATE.; FECHA = TODAY( ); INPUT X GRUPO $; DATALINES; 12.5 azul ; RUN; La primer sentencia define el nombre del dataset. La segunda le asigna un formato de fecha a la variable fecha. Esto a se debe a que internamente SAS almacena el resultado como un valor num\u00e9rico, pero quisieramos visualizarlo como una fecha. En la tercer sentencia se define una variable num\u00e9rica mediante una funci\u00f3n, la cual obtiene la fecha de hoy (n\u00famero de d\u00edas transcurridos desde el 1 de enero de 1960). En la siguiente sentencia se declaran 2 variables que sas va a recibir, la segunda se define como caracter al agregarle el signo $ . La sentencia DATALINES le dice al programa que se introducir\u00e1n valores de manera manual (cada rengl\u00f3n representa la primera observaci\u00f3n y cada variable est\u00e1 separada por un espacio). El punto y coma dicta el fin de la introducci\u00f3n de datos. Finalmente la palabra RUN define el fin del paso DATA. Un dataset consiste de dos partes: Una porci\u00f3n descriptora Una porci\u00f3n de datos La porci\u00f3n de datos es una colecci\u00f3n de datos arreglados en una tabla rectangular. Cada rengl\u00f3n o observaci\u00f3n representa mediciones de un individuo. La porci\u00f3n descriptora de un dataset contiene informaci\u00f3n del descriptor, por ejemplo, el nombre, fecha y hora de creaci\u00f3n, n\u00famero de observaciones y n\u00famero de variables. La porci\u00f3n descriptora tambien contiene informaci\u00f3n de los atributos de cada variable en el dataset. Los atributos contienen informaci\u00f3n como el nombre de la variable, el tipo, longitud, formato, informato y etiqueta. El siguiente cuadro resume los atributos de las variables. Nombre Valor Ejemplo Requerido Nota Variable Nombre SAS _nombre_alumno2 S\u00ed Hasta 32 car\u00e1cteres, iniciando con _ o una letras, puede contener valores num\u00e9ricos. Tipo char o num num S\u00ed Los valores perdidos (missing) para variables num\u00e9ricas se representan con . o con \"\" para caracter. Longitud Hasta 32,767 bytes para caracter, 8 para variables num\u00e9ricas 8 S\u00ed Las variables num\u00e9ricas se almacenan como valores de punto flotante en 8 bytes de longitud. Formato Nombre de formato date10. No Consulte Formatos de SAS para una referencia completa Informato Nombre de Informato dollar10. No Consulte Informatos de SAS para una referencia completa Etiqueta Una cadena de hasta 256 caracteres \u201cSegundo nombre del alumno\u201d No Algunos procedimientos o reportes usan la etiqueta en lugar del nombre de la variable. Es posible conocer las propiedades de un dataset usando el PROCEDIMIENTO CONTENTS para conocer la porci\u00f3n descriptora de un dataset. El siguiente c\u00f3digo nos muestra c\u00f3mo saber las propiedades de un dataset almacenado en sas. 1 2 PROC CONTENTS DATA = SASHELP . HEART VARNUM ; RUN; El resultado se muestra a continuaci\u00f3n","title":"Datasets"},{"location":"sas/intro_sas/#librerias","text":"Las librer\u00edas o bibliotecas son rutas donde se almacenan los datasets. Librer\u00eda Una librer\u00eda de SAS es una colecci\u00f3n de archivos de SAS. Es el nivel m\u00e1s alto de organizaci\u00f3n para la informaci\u00f3n dentro de SAS. En el sistema operativo Windows o UNIX, una librer\u00eda es t\u00edpicamente un grupo de archivos de SAS en el mismo folder o directorio. Si no se define una librer\u00eda, sas define una librer\u00eda temporal llamada WORK, la cual eliminar\u00e1 todos los datasets al finalizar la sesi\u00f3n. Para definir una librer\u00eda, se puede asignar una librer\u00eda a un ruta de la forma LIBNAME libref 'sas-library'; , donde libref es el nombre de la librer\u00eda (un nombre de sas de 1 a 8 caracteres que inicia con una letra o gui\u00f3n bajo y contiene solo letras, n\u00fameros o gui\u00f3n bajo) y sas-library es la ruta donde se almacenar\u00e1n los dataset, por ejemplo: 1 LIBNAME TAREAS \"C:\\Users\\Default\\Documents\" ; asignar\u00eda dicho directorio a la librer\u00eda TAREAS . Para referirse a un dataset almacenado en dicha librer\u00eda, se utiliza el siguiente nombre LIBRARY.DATASET , por ejemplo TAREAS.TABLA .","title":"Librer\u00edas"},{"location":"sas/intro_sas/#macros-y-variables-macro","text":"Adem\u00e1s de los pasos PROC y DATA, SAS tiene un lenguaje especial llamado lenguaje macro, el cual especie de procesador de instrucciones que compila y ejecuta. Este lenguaje es muy \u00fatil para ejecutar tareas comunes o repetitivas A diferencia de otros lenguajes de programaci\u00f3n, SAS no permite definir variables de forma directa. Sin embargo, es posible definir variables macro , las cuales almacenan un valor ya sea un n\u00famero o un texto. Dichas variables son evaluadas y pueden ser llamadas en cualquier procedimiento macro. Hay tres formas de crear variables macro: Con la sentencia %let . Con la llamada symput() . con la sentencia INTO dentro de un procedimiento SQL. Se usa la sentencia %let macro-variable = <value>; y para mandar llamar el valor de dicha variable maro se usa &macro-variable . Por ejemplo si se desea definir ciertas variables a analizar, se puede crear la siguiente sentencia; 1 2 3 4 5 %let x = age weight height ; PROC MEANS DATA = SASHELP . CLASS; VAR &X ; RUN; Para ver el valor de la variable macro, se puede usar la sentencia macro %PUT <&macro-variable> , por ejemplo: 1 %PUT &x ; y el resultado ser\u00e1 age weight height Para m\u00e1s informaci\u00f3n acerca de sentencias y variables macro visite la documentaci\u00f3n de SAS .","title":"Macros y variables macro"}]}